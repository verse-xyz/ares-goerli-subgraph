type Factory @entity {
  id: ID!
}

type Token @entity {
  # address
  id: ID!

  # mirrored from smart contract
  name: String!
  image: Bytes!
  creator: Bytes!
  targetPrice: BigInt!
  priceDecayPercent: BigInt!
  perTimeUnit: BigInt!
  circulatingSupply: BigInt!

  # derived fields
  images: [Image!]! @derivedFrom(field: "token")
  knits: [Knit!]! @derivedFrom(field: "token")
  mirrors: [Mirror!]! @derivedFrom(field: "token")
  burns: [Burn!]! @derivedFrom(field: "token")
}

# created 
type User @entity {
  id: ID! # user address
  positions: [ImagePosition!]! @derivedFrom(field: "user")
  knits: [Knit!]! @derivedFrom(field: "user")
  mirrors: [Mirror!]! @derivedFrom(field: "user")
  burns: [Burn!]! @derivedFrom(field: "user")
}

# interactions
type Image @entity {
  id: ID! # image hash
  token: Token!
  creator: User! 
  imageURI: String!
  timestamp: BigInt!
  positions: [ImagePosition!]! @derivedFrom(field: "image")
  provenanceCount: BigInt!
}

type ImagePosition @entity {
  id: ID! # image hash + user address + token + token Id
  image: Image!
  token: Token!
  tokenId: BigInt!
  user: User!
  timestamp: BigInt!
  active: Boolean!
}

# events
type Knit @entity {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  token: Token! 
  tokenId: BigInt! 
  user: User! 
  imageHash: Bytes! 
  imageURI: String!
  price: BigInt! 
}

type Mirror @entity {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  token: Token! 
  tokenId: BigInt!
  user: User!
  imageHash: Bytes!
  imageURI: String!
  price: BigInt!
}

type Burn @entity {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  token: Token! 
  tokenId: BigInt! 
  user: User! 
  imageHash: Bytes!
  imageURI: String!
  price: BigInt! 
}

