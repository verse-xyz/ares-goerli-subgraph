// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ImageCreated extends ethereum.Event {
  get params(): ImageCreated__Params {
    return new ImageCreated__Params(this);
  }
}

export class ImageCreated__Params {
  _event: ImageCreated;

  constructor(event: ImageCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get imageURI(): string {
    return this._event.parameters[1].value.toString();
  }

  get imageHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ImageProvenanceCountUpdated extends ethereum.Event {
  get params(): ImageProvenanceCountUpdated__Params {
    return new ImageProvenanceCountUpdated__Params(this);
  }
}

export class ImageProvenanceCountUpdated__Params {
  _event: ImageProvenanceCountUpdated;

  constructor(event: ImageProvenanceCountUpdated) {
    this._event = event;
  }

  get imageURI(): string {
    return this._event.parameters[0].value.toString();
  }

  get imageHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get updatedProvenanceCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Image__tokenDetailsResultValue0Struct extends ethereum.Tuple {
  get imageURI(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get imageHash(): Bytes {
    return this[3].toBytes();
  }
}

export class Image extends ethereum.SmartContract {
  static bind(address: Address): Image {
    return new Image("Image", address);
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenDetails(tokenId: BigInt): Image__tokenDetailsResultValue0Struct {
    let result = super.call(
      "tokenDetails",
      "tokenDetails(uint256):((string,address,uint256,bytes32))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<Image__tokenDetailsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_tokenDetails(
    tokenId: BigInt
  ): ethereum.CallResult<Image__tokenDetailsResultValue0Struct> {
    let result = super.tryCall(
      "tokenDetails",
      "tokenDetails(uint256):((string,address,uint256,bytes32))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Image__tokenDetailsResultValue0Struct>(value[0].toTuple())
    );
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _universalImageStorage(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnTokenCall extends ethereum.Call {
  get inputs(): BurnTokenCall__Inputs {
    return new BurnTokenCall__Inputs(this);
  }

  get outputs(): BurnTokenCall__Outputs {
    return new BurnTokenCall__Outputs(this);
  }
}

export class BurnTokenCall__Inputs {
  _call: BurnTokenCall;

  constructor(call: BurnTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnTokenCall__Outputs {
  _call: BurnTokenCall;

  constructor(call: BurnTokenCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _initStrings(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _creator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class KnitTokenCall extends ethereum.Call {
  get inputs(): KnitTokenCall__Inputs {
    return new KnitTokenCall__Inputs(this);
  }

  get outputs(): KnitTokenCall__Outputs {
    return new KnitTokenCall__Outputs(this);
  }
}

export class KnitTokenCall__Inputs {
  _call: KnitTokenCall;

  constructor(call: KnitTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get creator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get imageURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class KnitTokenCall__Outputs {
  _call: KnitTokenCall;

  constructor(call: KnitTokenCall) {
    this._call = call;
  }
}

export class MirrorTokenCall extends ethereum.Call {
  get inputs(): MirrorTokenCall__Inputs {
    return new MirrorTokenCall__Inputs(this);
  }

  get outputs(): MirrorTokenCall__Outputs {
    return new MirrorTokenCall__Outputs(this);
  }
}

export class MirrorTokenCall__Inputs {
  _call: MirrorTokenCall;

  constructor(call: MirrorTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get imageHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class MirrorTokenCall__Outputs {
  _call: MirrorTokenCall;

  constructor(call: MirrorTokenCall) {
    this._call = call;
  }
}
