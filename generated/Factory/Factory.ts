// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HyperimageDeployed extends ethereum.Event {
  get params(): HyperimageDeployed__Params {
    return new HyperimageDeployed__Params(this);
  }
}

export class HyperimageDeployed__Params {
  _event: HyperimageDeployed;

  constructor(event: HyperimageDeployed) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get image(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Factory__deployResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getImage(): Address {
    return this.value1;
  }
}

export class Factory__deployInput_tokenParamsStruct extends ethereum.Tuple {
  get initStrings(): Bytes {
    return this[0].toBytes();
  }

  get targetPrice(): BigInt {
    return this[1].toBigInt();
  }

  get priceDecayPercent(): BigInt {
    return this[2].toBigInt();
  }

  get perTimeUnit(): BigInt {
    return this[3].toBigInt();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  deploy(
    _tokenParams: Factory__deployInput_tokenParamsStruct
  ): Factory__deployResult {
    let result = super.call(
      "deploy",
      "deploy((bytes,int256,int256,int256)):(address,address)",
      [ethereum.Value.fromTuple(_tokenParams)]
    );

    return new Factory__deployResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_deploy(
    _tokenParams: Factory__deployInput_tokenParamsStruct
  ): ethereum.CallResult<Factory__deployResult> {
    let result = super.tryCall(
      "deploy",
      "deploy((bytes,int256,int256,int256)):(address,address)",
      [ethereum.Value.fromTuple(_tokenParams)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__deployResult(value[0].toAddress(), value[1].toAddress())
    );
  }

  getAddresses(_token: Address): Address {
    let result = super.call("getAddresses", "getAddresses(address):(address)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toAddress();
  }

  try_getAddresses(_token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAddresses",
      "getAddresses(address):(address)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  imageImpl(): Address {
    let result = super.call("imageImpl", "imageImpl():(address)", []);

    return result[0].toAddress();
  }

  try_imageImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall("imageImpl", "imageImpl():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAuthorized(_address: Address): boolean {
    let result = super.call("isAuthorized", "isAuthorized(address):(bool)", [
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_isAuthorized(_address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAuthorized", "isAuthorized(address):(bool)", [
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenImpl(): Address {
    let result = super.call("tokenImpl", "tokenImpl():(address)", []);

    return result[0].toAddress();
  }

  try_tokenImpl(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenImpl", "tokenImpl():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  universalImageStorage(): Address {
    let result = super.call(
      "universalImageStorage",
      "universalImageStorage():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_universalImageStorage(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "universalImageStorage",
      "universalImageStorage():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get _tokenParams(): DeployCall_tokenParamsStruct {
    return changetype<DeployCall_tokenParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get image(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class DeployCall_tokenParamsStruct extends ethereum.Tuple {
  get initStrings(): Bytes {
    return this[0].toBytes();
  }

  get targetPrice(): BigInt {
    return this[1].toBigInt();
  }

  get priceDecayPercent(): BigInt {
    return this[2].toBigInt();
  }

  get perTimeUnit(): BigInt {
    return this[3].toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _image(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _universalImageStorage(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}
